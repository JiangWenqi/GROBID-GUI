# %p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %d：输出日志时间点的日期或时间，默认格式为ISO8601，可以指定格式如：%d{yyyy/MM/dd HH:mm:ss,SSS}
# %r：输出自应用程序启动到输出该log信息耗费的毫秒数
# %t：输出产生该日志事件的线程名
# %l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数
# %c：输出日志信息所属的类目，通常就是类全名
# %M：输出产生日志信息的方法名
# %F：输出日志消息产生时所在的文件名
# %L：输出代码中的行号
# %m：输出代码中指定的具体日志信息
# %n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"
# %x：输出和当前线程相关联的NDC(嵌套诊断环境)
# %%：输出一个"%"字符

### 设置###
log4j.rootLogger = debug,stdout,D,E
 
### 输出信息到控制台###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p]%d{yyyy-MM-dd HH:mm:ss,SSS} Thread:(%5t) Method: %l%n%m%n
 
### 输出debug级别以上的日志到 grobid/grobid_debug.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = ./grobid_debug.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%-5p]%d{yyyy-MM-dd HH:mm:ss,SSS} Thread:(%5t) Method:(%c.%M) %m%n
 
### 输出error级别以上的日志到 grobid/grobid_error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = ./grobid_error.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = [%-5p]%d{yyyy-MM-dd HH:mm:ss,SSS} Thread:(%5t) Method:(%c.%M) %m%n